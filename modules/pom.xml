<?xml version="1.0" encoding="UTF-8"?>
<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.levonk.build</groupId>
	<artifactId>maven-archetypes</artifactId>
	<packaging>pom</packaging>
	<version>1.0</version>

	<organization>
		<name>LevonK</name>
	</organization>

	<modules>
		<module>maven-archetype-parent</module>
	</modules>

	<repositories>
		<repository>
			<id>maven2-repository.java.net</id>
			<name>Java.net maven repository</name>
			<url>http://download.java.net/maven/2/</url>
			<layout>default</layout>
		</repository>

		<repository>
			<id>codehaus-snapshots</id>
			<name>CodeHaus Snapshots</name>
			<url>https://nexus.codehaus.org/content/repositories/codehaus-snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>
	</repositories>

	<dependencies>
		<!-- If you have arbitrary jar that want to deploy into a central maven repository you can use
			 %mvn deploy:deploy-file -DgroupId=levonk-imported -DartifactId=levonk-package \
					-Dversion=1-levonkVersion -Dpackaging=jar -Dfile=otherjar.jar \
					-Durl=scp://maven.levonk.com.:/maven/repo/path -DrepositoryId=levonk.internal
		-->
		<!-- Unit Testing Dependencies -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>${dep.version.testng}</version>
			<scope>test</scope>
		</dependency>
		<!--
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${dep.version.junit}</version>
			<scope>test</scope>
		</dependency>
		-->

		<!-- Logging Dependencies -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>0.9.28</version>
			<scope>runtime</scope>
		</dependency>
		<!--
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${dep.version.log4j}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${dep.version.slf4j}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${dep.version.slf4j}</version>
			<scope>runtime</scope>
		</dependency>
		-->

		<!-- Code Generation Dependencies -->
		<dependency>
			<!-- http://pojomatic.sourceforge.net/pojomatic/index.html -->
			<groupId>org.pojomatic</groupId>
			<artifactId>pojomatic</artifactId>
			<version>1.0</version>
		</dependency>

		<dependency>
			<!-- Lombok requires Javac v1.6 compiler or higher -->
			<!-- You still need to doubleclick the lombok.jar
				 file downloaded by maven to install lombok into
				 eclipse.
			-->
			<!-- http://projectlombok.org/features/index.html -->
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>0.9.3</version>
			<scope>provided</scope>
		</dependency>

		<!-- Add Cofoja Design By Contract lib when available -->

		<!-- General Utility Libraries -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>r08</version>
		</dependency>
		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<!-- Apache -->
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.2</version>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<!-- General Settings -->
				<plugin>
					<!-- compiler version -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${plugin.version.maven-compiler}</version>
					<configuration>
						<showDeprecation>true></showDeprecation>
						<showWarnings>true></showWarnings>
						<source>${project.java.version}</source>
						<target>${project.java.version}</target>
					</configuration>
				</plugin>

				<!-- Static Analysis Tools -->
				<plugin>
					<!-- Checkstyle -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>${plugin.version.checkstyle}</version>
					<dependencies>
						<dependency>
							<groupId>com.levonk.build</groupId>
							<artifactId>build-tools</artifactId>
							<version>${levonk.dep.version.build-tools}</version>
						</dependency>
					</dependencies>
					<configuration>
						<configLocation>static-analysis/checkstyle.xml</configLocation>
					</configuration>
				</plugin>

				<plugin>
					<!-- PMD -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>${plugin.version.checkstyle}</version>
					<dependencies>
						<dependency>
							<groupId>com.levonk.build</groupId>
							<artifactId>build-tools</artifactId>
							<version>${levonk.dep.version.build-tools}</version>
						</dependency>
					</dependencies>
					<configuration>
						<configLocation>static-analysis/checkstyle.xml</configLocation>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<docletArtifact>
						<!-- http://code.google.com/p/doclava/wiki/GettingStarted -->
						<groupId>com.google.doclava</groupId>
						<artifactId>doclava</artifactId>
						<version>1.0.3</version>
					</docletArtifact>
					<doclet>com.google.doclava.Doclava</doclet>
					<!--
						bootclasspath required by Sun's JVM
					-->
					<bootclasspath>${sun.boot.class.path}</bootclasspath>
					<additionalparams>
						-quiet
						-federate JDK http://doclava.googlecode.com/svn/static/api/openjdk-6.xml
						-hdf project.name "${project.name}"
						-d ${project.build.directory}/apidocs
					</additionalparams>
					<useStandardDocletOptions>false</useStandardDocletOptions>
					<!-- Apple's JVM sometimes requires more memory -->
					<additionalJOptions>-J-Xmx1024m</additionalJOptions>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jalopy-maven-plugin</artifactId>
				<version>1.0-SNAPSHOT</version>
				<configuration>
					<convention>source-munge/jalopy.xml</convention>
					<failOnError>false</failOnError>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>com.levonk.build</groupId>
						<artifactId>build-tools</artifactId>
						<version>${levonk.dep.version.build-tools}</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>
</project>
