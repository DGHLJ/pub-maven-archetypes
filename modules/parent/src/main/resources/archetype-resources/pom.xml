<?xml version="1.0" encoding="UTF-8"?>
<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>1.0.0.RC1</version>
    </parent>

	<groupId>${groupId}</groupId>
	<artifactId>${artifactId}</artifactId>
	<name>${project_name}</name>
	<url>${project_url}</url>
	<version>${version}</version>
	<packaging>pom</packaging>


	<organization>
		<name>${project_organization}</name>
		<url>${project_url}</url>
	</organization>

	<modules>
		<module>common</module>
   	</modules>

	<repositories>
		<repository>
			<id>Central</id>
			<name>maven central repository</name>
			<url>http://repo1.maven.org/maven2</url>
			<layout>default</layout>
		</repository>

		<repository>
			<id>maven2-repository.cloudera.com</id>
			<name>Cloudera.com maven repository</name>
			<url>https://repository.cloudera.com/content/repositories/releases/</url>
			<layout>default</layout>
		</repository>

		<repository>
			<id>maven2-repository.java.net</id>
			<name>Java.net maven repository</name>
			<url>http://download.java.net/maven/2/</url>
			<layout>default</layout>
		</repository>

		<repository>
			<id>codehaus-snapshots</id>
			<name>CodeHaus Snapshots</name>
			<url>https://nexus.codehaus.org/content/repositories/codehaus-snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>

		<repository>
			<id>elasticsearch-releases</id>
			<name>ElasticSearch Releases Repository</name>
			<url>http://oss.sonatype.org/content/repositories/releases/</url>
		</repository>

        <repository>
            <id>checker-framework-repo</id>
            <url>http://types.cs.washington.edu/m2-repo</url>
        </repository>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>http://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>http://maven.springframework.org/snapshot</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
	</repositories>

	 <pluginRepositories>
        <pluginRepository>
            <id>maven</id>
            <name>Standard Maven repo</name>
            <url>http://repo1.maven.org/maven2</url>
        </pluginRepository>

        <pluginRepository>
            <id>spring-snapshots</id>
            <url>http://repo.spring.io/snapshot</url>
        </pluginRepository>
        <pluginRepository>
            <id>spring-milestones</id>
            <url>http://repo.spring.io/milestone</url>
        </pluginRepository>
        <pluginRepository>
            <id>checker-framework-repo</id>
            <url>http://types.cs.washington.edu/m2-repo</url>
        </pluginRepository>
    </pluginRepositories>

    <dependencies>

        <!-- If you have arbitrary jar that want to deploy into a central maven repository you can use
             %mvn deploy:deploy-file -DgroupId=levonk-imported -DartifactId=levonk-package \
                    -Dversion=1-levonkVersion -Dpackaging=jar -Dfile=otherjar.jar \
                    -Durl=scp://maven.levonk.com.:/maven/repo/path -DrepositoryId=levonk.internal
        -->

        <dependency>
            <!-- https://docs.google.com/document/d/1THRUCIzIPRqFSHb67pHV8KMbo55HphSXqlQcIx9oUiI/edit -->
            <groupId>com.google.auto.value</groupId>
            <artifactId>auto-value</artifactId>
            <version>${autovalue.version}</version>
            <scope>provided</scope>
        </dependency>

	<dependency>
		<!-- 
			Automatic generation of the Builder pattern for Java 1.6+ 
			http://freebuilder.inferred.org
			https://github.com/google/FreeBuilder
		-->
		<groupId>org.inferred</groupId>
		<artifactId>freebuilder</artifactId>
		<version>${freebuilder.version}</version>
		<optional>true</optional>
	</dependency>

        <!-- Static Analysis -->
        <dependency>
            <!-- groupId>net.sourceforge.findbugs</groupId -->
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>annotations</artifactId>
            <version>${findbugs-extra.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <!-- groupId>net.sourceforge.findbugs</groupId -->
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>${findbugs-extra.version}</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>


        <!-- Apache
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-lang3</artifactId>
		<version>${commonslang3.version}</version>
	</dependency>
     -->
     
 
        <!-- Unit Testing Dependencies -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>nl.jqno.equalsverifier</groupId>
            <artifactId>equalsverifier</artifactId>
            <version>${equalsverifier.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Mock framework -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Logging Dependencies -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
            <scope>runtime</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback.contrib</groupId>
            <artifactId>logback-jackson</artifactId>
            <version>${logback-jackson.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <!-- A JaxB mapper is necessary for logback-ext-json-classic
                you can use others though, it doesn't have to be jackson -->
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-mapper-asl</artifactId>
            <version>${jackson1.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <!-- https://github.com/logstash/logstash-logback-encoder -->
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
            <version>${logstash.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.checkerframework</groupId>
            <artifactId>checker-qual</artifactId>
            <version>${checkers.version}</version>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
		<dependency>
			<!-- https://github.com/OpenHFT/Zero-Allocation-Hashing -->
      			<groupId>net.openhft</groupId>
      			<artifactId>zero-allocation-hashing</artifactId>
      			<version>${zeroallochash.version}</version>
		</dependency>
		<dependency>
      			<groupId>com.jayway.restassured</groupId>
      			<artifactId>rest-assured</artifactId>
      			<version>${restassured.version}</version>
      			<scope>test</scope>
		</dependency>
		<dependency>
      			<groupId>com.jayway.restassured</groupId>
      			<artifactId>xml-path</artifactId>
      			<version>${restassured.version}</version>
      			<scope>test</scope>
		</dependency>
		<dependency>
      			<groupId>com.jayway.restassured</groupId>
      			<artifactId>json-schema-validator</artifactId>
      			<version>${restassured.version}</version>
      			<scope>test</scope>
		</dependency>
		<dependency>
      			<groupId>com.jayway.restassured</groupId>
      			<artifactId>spring-mock-mvc</artifactId>
      			<version>${restassured.version}</version>
      			<scope>test</scope>
		</dependency>

            <!-- Add Cofoja Design By Contract lib when available -->
            <dependency>
                <groupId>org.slfj</groupId>
                <artifactId>jcl-over-slf4j</artifactId>
                <version>${slfj.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>${spring.version}</version>
                <exclusions>
                    <!-- Starters use SLF4J -->
                    <exclusion>
                        <groupId>commons-logging</groupId>
                        <artifactId>commons-logging</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-actuator</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-amqp</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-aop</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-actuator</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-batch</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-jpa</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-integration</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-jdbc</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-jetty</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-log4j</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-mobile</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-redis</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-shell-remote</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-thymeleaf</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-tomcat</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-websocket</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>
            <dependency>
                <groupId>commons-lang</groupId>
                <artifactId>commons-lang</artifactId>
                <version>${commonslang.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.avro</groupId>
                <artifactId>avro</artifactId>
                <version>${avro.version}</version>
            </dependency>

            <!-- Code Generation Dependencies -->
            <dependency>
                <!-- http://pojomatic.sourceforge.net/pojomatic/index.html -->
                <groupId>org.pojomatic</groupId>
                <artifactId>pojomatic</artifactId>
                <version>${pojomatic.version}</version>
            </dependency>

            <dependency>
                <!-- Lombok requires Javac v1.6 compiler or higher -->
                <!-- You still need to doubleclick the lombok.jar
                     file downloaded by maven to install lombok into
                     eclipse.
                -->
                <!-- http://projectlombok.org/features/index.html -->
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>
            <!-- checker framework-->
            <dependency>
                <groupId>org.checkerframework</groupId>
                <artifactId>checker-framework</artifactId>
                <version>1.8.0</version>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <!--
        Specify all the version numbers of all dependencies here so we don't
        have to specify them in multiple children.
        The parent will not force this dependency, but it will specify a
        default version number
    -->
    <build>
        <plugins>
            <!-- General Settings -->
            <!-- Code Coverage -->
            <!-- Don't forget to add a Jenkins
                "Post-build Actions->Folders or files
                containing JaCoCo XML reports:"
                    **/target/site/jacoco/jacoco*.xml
              -->
            <plugin>

                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <configuration>
                    <dataFile>${project.build.directory}/jacoco.exec</dataFile>
                    <outputDirectory>${project.build.directory}/jacoco-ut</outputDirectory>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- compiler version -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${compiler.version}</version>
                <configuration>
                    <forceJavacCompilerUse>true</forceJavacCompilerUse>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <optimize>true</optimize>
                    <debug>true</debug>
                    <fork>true</fork>
                    <meminitial>128m</meminitial>
                    <maxmem>512m</maxmem>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.google.errorprone</groupId>
                        <artifactId>error_prone_core</artifactId>
                        <version>${errorprone.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.codehaus.plexus</groupId>
                        <artifactId>plexus-compiler-javac</artifactId>
                        <version>${plexusCompiler.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.codehaus.plexus</groupId>
                        <artifactId>plexus-compiler-javac-errorprone</artifactId>
                        <version>${plexusCompilerErrorProne.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>${site.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${source.version}</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

		<!-- Static Analysis Tools -->
            	<!--
            		http://www.mojohaus.org/versions-maven-plugin/index.html
			mvn -U versions:display-plugin-updates
			mvn -U versions:display-dependency-updates
            	-->
		<plugin>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>versions-maven-plugin</artifactId>
			<version>${versions.version}</version>
		</plugin>
            <plugin>
				<!--
					https://github.com/andrewgaul/modernizer-maven-plugin
					Prevent the use of legacy Java APIs
				-->
                <groupId>org.gaul</groupId>
                <artifactId>modernizer-maven-plugin</artifactId>
                <version>${modernizer.version}</version>
				<configuration>
					<javaVersion>${java.version}</javaVersion>
					<failOnViolations>false</failOnViolations>
				</configuration>
				<executions>
					<execution>
						<id>modernizer</id>
						<phase>compile</phase>
						<goals>
							<goal>modernizer</goal>
						</goals>
					</execution>
				</executions>
            </plugin>

            <plugin>
                <groupId>org.checkerframework</groupId>
                <artifactId>checkerframework-maven-plugin</artifactId>
                <version>1.8.0</version>
                <executions>
                    <execution>
                        <phase>process-classes</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <processors>
                        <processor>org.checkerframework.checker.nullness.NullnessChecker</processor>
                        <processor>org.checkerframework.checker.interning.InterningChecker</processor>
                        <processor>org.checkerframework.checker.lock.LockChecker</processor>
                        <processor>org.checkerframework.checker.fenum.FenumChecker</processor>
                        <processor>org.checkerframework.checker.tainting.TaintingChecker</processor>
                        <processor>org.checkerframework.checker.regex.RegexChecker</processor>
                        <processor>org.checkerframework.checker.propkey.PropertyKeyChecker</processor>
                        <processor>org.checkerframework.checker.i18n.I18nChecker</processor>
                        <processor>org.checkerframework.checker.compilermsgs.CompilerMessagesChecker</processor>
                        <processor>org.checkerframework.checker.signature.SignatureChecker</processor>
                        <processor>org.checkerframework.checker.units.UnitsChecker</processor>
                        <processor>org.checkerframework.checker.linear.LinearChecker</processor>
                        <processor>org.checkerframework.checker.igj.IGJChecker</processor>
                        <processor>org.checkerframework.checker.javari.JavariChecker</processor>
                        <processor>org.checkerframework.common.subtyping.SubtypingChecker</processor>
                    </processors>
                    <skip>true</skip>
                    <failOnError>true</failOnError>
                    <!-- additional parameters passed to the Java compiler -->
                    <javacParams>-Aquals</javacParams>
                    <javacParams>-AprintErrorStack</javacParams>
                    <!-- additional parameters to pass to the forked JVM -->
                    <javaParams>-Xdebug</javaParams>
                </configuration>
            </plugin>

            <plugin>

                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${checkstyle.version}</version>
                <configuration>
                    <configLocation>codequality/checkstyle.xml</configLocation>
                    <headerLocation>LICENSE.txt</headerLocation>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.disney.studio.ds.buildtool</groupId>
                        <artifactId>build-tools</artifactId>
                        <version>1.0</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>checkstyle</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>${enforcer.version}</version>
                <executions>
                    <execution>
                        <id>enforce-banned-dependencies</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <fail>true</fail>
                            <rules>
                                <bannedDependencies>
                                    <searchTransitive>true</searchTransitive>
                                    <excludes>
                                        <exclude>aspectj:aspectj*</exclude>
                                        <exclude>commons-logging</exclude>
                                        <exclude>hsqldb:hsqldb</exclude>
                                        <exclude>javassist:javassist</exclude>
                                        <exclude>junit:junit</exclude>
                                        <exclude>log4j:log4j</exclude>
                                        <exclude>org.slf4j:1.5*</exclude>
                                        <exclude>org.springframework:2.*</exclude>
                                        <exclude>org.springframework:3.0.*</exclude>
                                    </excludes>
                                </bannedDependencies>
                                <DependencyConvergence/>
                                <requireMavenVersion>
                                    <version>[3.0.3,)</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>${java.version}</version>
                                </requireJavaVersion>
                    		<evaluateBeanshell>
                        		<condition>javax.crypto.Cipher.getMaxAllowedKeyLength("AES") > 128</condition>
                    		</evaluateBeanshell>
                    		<reactorModuleConvergence>
                			<message>Maven-enforcer: The reactor Module Convergance is not valid</message>
                			<ignoreModuleDependencies>true</ignoreModuleDependencies>
                		</reactorModuleConvergence>
				<requireSameVersions>
					<plugins>
						<plugin>org.apache.maven.plugins:maven-surefire-plugin</plugin>
						<plugin>org.apache.maven.plugins:maven-failsafe-plugin</plugin>
						<plugin>org.apache.maven.plugins:maven-surefire-report-plugin</plugin>
					</plugins>
				</requireSameVersions>
				<requireSameVersions>
					<dependencies>
						<dependency>org.apache.maven</dependency> <!-- or org.apache.maven:* -->
					</dependencies>
				</requireSameVersions>
				<requireSameVersions>
					<dependencies>
						<dependency>org.apache.camel</dependency> <!-- or org.apache.camel:* -->
					</dependencies>
				</requireSameVersions>
				<requireSameVersions>
					<dependencies>
						<dependency>org.springframework</dependency> <!-- or org.springframework:* -->
					</dependencies>
				</requireSameVersions>
				<requireSameVersions>
					<dependencies>
						<dependency>org.springframework.boot</dependency> <!-- or org.springframework.boot:* -->
					</dependencies>
				</requireSameVersions>
				<requireSameVersions>
					<dependencies>
						<dependency>com.jayway.restassured</dependency> <!-- or com.jayway.restassured:* -->
					</dependencies>
				</requireSameVersions>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- PMD -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>${pmd.version}</version>
                <configuration>
                    <rulesets>
                        <ruleset>
                            https://github.com/pwangjing/mavenrepository/raw/master/releases/com/archetype/codequality/pmd/1.0.0/pmd-1.0.0.xml
                        </ruleset>
                    </rulesets>
                    <targetJdk>${java.version}</targetJdk>
                    <linkXRef>false</linkXRef>
                </configuration>
            </plugin>

            <plugin>
                <!-- Findbugs -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>${findbugs.version}</version>

                <configuration>
                    <excludeFilterFile>
                        https://github.com/pwangjing/mavenrepository/raw/master/releases/com/archetype/codequality/FindBugFilter/1.0.0/FindBugFilter-1.0.0.xml
                    </excludeFilterFile>
                    <threshold>Low</threshold>
                </configuration>
            </plugin>


            <plugin>
                <!--
                    Goals:
                    cobertura:check
                    cobertura:clean
                    cobertura:dump-datafile
                    cobertura:instrument
                    cobertura:cobertura
                -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>${cobertura.version}</version>
                <configuration>
                    <check/>
                    <formats>
                        <format>xml</format>
                    </formats>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.soebes.maven.plugins.mlv</groupId>
                <artifactId>maven-license-verifier-plugin</artifactId>
                <version>${licenseVerifier.version}</version>
                <executions>
                    <execution>
                        <id>license-verifier</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.archetype</groupId>
                        <artifactId>licenses</artifactId>
                        <version>${licenses.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>${eclipse.version}</version>
                <configuration>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>jalopy-maven-plugin</artifactId>
                <version>${jalopy.version}</version>
                <configuration>
                    <convention>source-munge/jalopy.xml</convention>
                    <failOnError>false</failOnError>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${dependency.version}</version>
                <executions>
                    <execution>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- lets get rid .class that are effected through
                inheritance using ant -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>${antrun.version}</version>
                <executions>
                    <!-- handle regular sources -->
                    <execution>
                        <id>depend-sources</id>
                        <phase>process-sources</phase>
                        <configuration>
                            <target>
                                <depend srcDir="${project.build.sourceDirectory}"
                                        destDir="${project.build.outputDirectory}"
                                        cache="${project.build.outputDirectory}"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <!-- handle test files -->
                    <execution>
                        <id>depend-test-sources</id>
                        <phase>process-test-sources</phase>
                        <configuration>
                            <target>
                                <depend srcDir="${project.build.testSourceDirectory}"
                                        destDir="${project.build.testOutputDirectory}"
                                        cache="${project.build.testOutputDirectory}"
                                        classpath="${project.build.outputDirectory}"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <!-- testing -->
            <!--
                Tests are divided into three categories:
                1. Very fast Unit Tests (default) - run often in development
                2. slower integration but self-sufficent tests (Spring context and/or H2 Database - run before commits
                3. real integration tests (requiring remote servers) - run by CI Server

                You can seperate tests by adding the annotation
                @Test(groups = "self-integration")
                or
                @Test(groups = "full-integration")
                http://www.javacodegeeks.com/2012/04/testng-and-maven-configuration-guide.html
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire.version}</version>
                <executions>
                    <execution>
                        <!-- Override default configuration, which treats all tests the same -->
                        <id>default-test</id>
                        <configuration>
                            <excludedGroups>self-integration,full-integration</excludedGroups>
                        </configuration>
                    </execution>
                    <execution>
                        <id>self-integration</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <groups>self-integration</groups>
                            <reportsDirectory>target/self-integration-surefire-reports/</reportsDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.avro</groupId>
                    <artifactId>avro-maven-plugin</artifactId>
                    <version>${avro.version}</version>
					<executions>
						<execution>
							<phase>generate-sources</phase>
							<goals>
								<goal>schema</goal>
							</goals>
							<configuration>
								<sourceDirectory>
									${project.basedir}/src/main/avro
								</sourceDirectory>
								<outputDirectory>
									${project.build.directory}/generated-sources/avro
								</outputDirectory>
								<testSourceDirectory>
									${project.basedir}/src/test/avro
								</testSourceDirectory>
								<testOutputDirectory>
									${project.build.directory}/generated-test-sources/avro
								</testOutputDirectory>
								<fieldVisibility>
									PRIVATE
								</fieldVisibility>
							</configuration>
						</execution>
					</executions>
                </plugin>
                <!-- android plugin -->
                <plugin>
                    <groupId>com.jayway.maven.plugins.android.generation2</groupId>
                    <artifactId>maven-android-plugin</artifactId>
                    <version>${android.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <configuration>
                        <archive>
                            <manifest>
                                <mainClass>${start-class}</mainClass>
                            </manifest>
                        </archive>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <configuration>
                        <mainClass>${start-class}</mainClass>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>pl.project13.maven</groupId>
                    <artifactId>git-commit-id-plugin</artifactId>
                    <version>2.1.7</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>revision</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <verbose>true</verbose>
                        <dateFormat>yyyy-MM-dd'T'HH:mm:ssZ</dateFormat>
                        <generateGitPropertiesFile>true</generateGitPropertiesFile>
                        <generateGitPropertiesFilename>src/main/resources/git.properties</generateGitPropertiesFilename>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <mainClass>${start-class}</mainClass>
                        <layout>ZIP</layout>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                	<groupId>org.pitest</groupId>
                	<artifactId>pitest-maven</artifactId>
                	<version>${pitest.version}</version>
                	<configuration>
                		<targetClasses>
                			<targetClass>${parent.groupId}</targetClass>
                		</targetClasses>
                		<targetTests>
                			<targetTest>${parent.groupId}*Test</targetTest>
                		</targetTests>
                		<outputFormats>
                			<!-- Sonar needs XML output -->
	                		<outputFormat>XML</outputFormat>
	                		<outputFormat>HTML</outputFormat>
                		</outputFormats>
                		<!-- Sonar expects reports to not have timestamps -->
                		<timestampedReports>false</timestampedReports>
                	</configuration>
                </plugin>
                
                <plugin>
                	<!-- You need entries in settings.xml to configure the link to the server, see readme -->
                	<groupId>org.codehaus.mojo</groupId>
                	<artifactId>sonar-maven-plugin</artifactId>
                	<version>${sonar.version}</version>
                </plugin>

		<plugin>
			<!-- /src/main/docker -->
			<!-- https://github.com/alexec/docker-maven-plugin/blob/master/USAGE.md -->
			<groupId>com.alexecollins.docker</groupId>
			<artifactId>docker-maven-plugin</artifactId>
			<version>${docker.version}</version>
			<configuration>
				<!-- out of the box, you shoud not need to have these, as they'll use sensible defaults -->
				<!-- (optional) your installed version -->
				<!-- (optional) if you want to push to a private repo -->
				<!-- should add the following to your settings.xml -->
				<username>${docker.username}</username>
				<email>${docker.email}</email>
				<serverAddress>${docker.serverAddress}</serverAddress>
				<!-- (optional) change here if you are using another port/host, e.g. 4243 -->
				<host>${docker.host}</host>
				<!-- (optional) if you need to run with configured SSL certificates -->
				<dockerCertPath>${user.home}/.docker</dockerCertPath>
				<!-- (optional) remove images created by Dockerfile (default false) -->
				<removeIntermediateImages>false</removeIntermediateImages>
				<!-- (optional) do/do not cache images (default true), disable to get the freshest images -->
				<cache>true</cache>
				<!-- (optional) exclude certain images -->
				<exclude>app,other</exclude>
				<!-- (optional) ignore problems with permission errors (e.g. if running on CircleCI -->
				<permissionErrorTolerant>true</permissionErrorTolerant>
				<!-- (optional) only remove containers on clean, do not remove images -->
				<cleanContainerOnly>false</cleanContainerOnly>
				</configuration>
				<dependencies>
					<dependency>
						<!-- set-up port forwarding if you're using boot2docker -->
						<groupId>com.alexecollins.docker</groupId>
						<artifactId>docker-java-orchestration-plugin-boot2docker</artifactId>
						<version>${docker.version}</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</pluginManagement>
    </build>

    <reporting>
        <outputDirectory>./target/site</outputDirectory>
        <plugins>
            <plugin>
                <!-- http://code.google.com/p/testability-explorer/wiki/Readme
                    see available options by running
                    mvn help:describe -Dplugin=com.google.testability-explorer:maven2-testability-plugin -Ddetail
                    -->
                <groupId>com.google.testability-explorer</groupId>
                <artifactId>maven-testability-plugin</artifactId>
                <version>1.3.3</version>
            </plugin>

            <!-- doc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${javadoc.version}</version>
            </plugin>
            <!-- testing -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>${surefire.version}</version>
            </plugin>
            <!-- static analysis -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${checkstyle.version}</version>
                <configuration>
                    <configLocation>codequality/checkstyle.xml</configLocation>
                    <headerLocation>LICENSE.txt</headerLocation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>${pmd.version}</version>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>${cobertura.version}</version>
                <configuration>
                    <formats>
                        <format>xml</format>
                    </formats>
                    <check></check>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>findbugs-maven-plugin</artifactId>
                <version>${findbugs.version}</version>
            </plugin>
 		<plugin>
 			<groupId>org.owasp</groupId>
			<artifactId>dependency-check-maven</artifactId>
			<version>${dependencycheck.version}</version>
			<executions>
				<execution>
					<goals>
						<goal>check</goal>
					</goals>
					<configuration>
					</configuration>
				</execution>
			</executions>               
		</plugin>
		<plugin>
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>versions-maven-plugin</artifactId>
			<version>${versions.version}</version>
			<reportSets>
				<reportSet>
					<reports>
						<report>dependency-updates-report</report>
						<report>plugin-updates-report</report>
						<report>property-updates-report</report>
					</reports>
				</reportSet>
			</reportSets>
		</plugin>		
        </plugins>
    </reporting>

    <properties>
        <start-class>com.levonk.springboot.App</start-class>
        <sonar.exclusions>**/generated-sources/**</sonar.exclusions>
        <sonar.pitest.mode>active</sonar.pitest.mode>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>1.8</java.version>
        <!-- version block -->
        <android.version>2.8.4</android.version>
        <autovalue.version>1.0-rc1</autovalue.version>
        <antrun.version>1.7</antrun.version>
        <avro.version>1.7.6</avro.version>
        <codequality.version>1.0.9</codequality.version>
        <checkers.version>1.8.0</checkers.version>
        <docker.version>1.13</docker.version>
        <spring-boot.version>1.0.0.RC1</spring-boot.version>
        <checkstyle.version>2.9.1</checkstyle.version>
        <cobertura.version>2.5.2</cobertura.version>
        <commonslang.version>2.6</commonslang.version>
        <commonslang3.version>3.2.1</commonslang3.version>
        <compiler.version>3.3</compiler.version> <!-- as of 2015-03-27 -->
        <dependency.version>2.8</dependency.version>
        <dependencycheck.version>1.3.0</dependencycheck.version> <!-- as of 2015-08-28 -->
        <doclava.version>1.0.6</doclava.version>
        <eclipse.version>2.9</eclipse.version>
        <enforcer.version>1.4.1</enforcer.version> <!-- 2015-09-01 -->
        <equalsverifier.version>1.3.1</equalsverifier.version>
        <errorprone.version>2.0.1</errorprone.version> <!-- as of 2015-03-27 -->
        <findbugs.version>2.5.2</findbugs.version>
        <findbugs-extra.version>1.3.9</findbugs-extra.version>
        <freebuilder.version>1.0-rc8</freebuilder.version> <!-- as of 2015-06-13 -->
        <gpg.version>1.5</gpg.version>
        <!-- as of 2014-03-11 -->
        <guava.version>16.0</guava.version>
        <jackson1.version>1.9.13</jackson1.version>
        <jacoco.version>0.7.4.201502262128</jacoco.version>
        <jalopy.version>1.0-alpha-1</jalopy.version>
        <javadoc.version>2.9.1</javadoc.version>
        <!-- as of 2014-03-11 -->
        <licenseVerifier.version>0.4</licenseVerifier.version>
        <licenses.version>1.0</licenses.version>
        <logback.version>1.0.13</logback.version>
        <logback-jackson.version>0.1.2</logback-jackson.version>
        <logstash.version>2.4</logstash.version>
        <lombok.version>1.12.5</lombok.version>
        <mockito.version>1.9.5</mockito.version>
	<modernizer.version>1.0.0</modernizer.version> <!-- 2014-09-19 -->
	<pitest.version>1.1.6</pitest.version> <!-- 2015-09-29 -->
        <plexusCompiler.version>2.5</plexusCompiler.version> <!-- 2015-03-27 -->
        <plexusCompilerErrorProne.version>2.5</plexusCompilerErrorProne.version> <!-- 2015-03-27 -->
        <pmd.version>3.0.1</pmd.version>
        <pojomatic.version>1.0</pojomatic.version>
        <proguard.version>2.0.6</proguard.version>
        <proguardBase.version>4.9</proguardBase.version>
        <restassured.version>2.5.0</restassured.version> <!-- 2015-08-27 -->
        <site.version>3.2</site.version>
        <slf4j.version>1.7.5</slf4j.version>
        <sonar.version>2.3</sonar.version> <!-- 2015-09-29 -->
        <!-- as of 2012-09-17 -->
        <source.version>2.2.1</source.version>
        <!-- as of 2014-03-11 -->
        <surefire.version>2.16</surefire.version>
        <!-- as of 2011-04-06 -->
        <testng.version>6.8.7</testng.version>
        <versions.version>2.2</versions.version> <!-- 2015-02-02 -->
        <zeroallochash.version>0.4</zeroallochash.version> <!-- 2015-09-12 -->
    </properties>

	<profiles>
		<profile>
			<id>signed-release</id>
			<activation>
				<property>
					<name>gpg.keyname</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>${gpg.version}</version>
						<executions>
							<execution>
								<id>sign-artifacts</id>
								<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>doclava</id>
			<activation>
				<file>
					<exists>${basedir}/src/main/java</exists>
				</file>
			</activation>
			<reporting>
				<plugins>
					<plugin>
						<artifactId>maven-javadoc-plugin</artifactId>
						<configuration>
							<bootclasspath>${sun.boot.class.path}</bootclasspath>
							<doclet>com.google.doclava.Doclava</doclet>
							<useStandardDocletOptions>false</useStandardDocletOptions>
							<docletArtifact>
								<groupId>com.google.doclava</groupId>
								<artifactId>doclava</artifactId>
								<version>1.0.5</version>
							</docletArtifact>
							<additionalparam>
								-hdf project.name "${project.name}"
								-d ${project.build.directory}/apidocs
								-quiet
							</additionalparam>
						</configuration>
					</plugin>
				</plugins>
			</reporting>
		</profile>
		<profile>
			<!-- @see http://www.yegor256.com/2014/07/20/liquibase-in-maven.html -->
			<id>with-liquibase</id>
			<activation>
				<file>
					<exists>${basedir}/src/main/liquibase/master.xml</exists>
				</file>
				<!-- following should be dependent on enviornment in settings.xml -->
				<property>liquibase.driver</property>
				<property>liquibase.url</property>
				<!-- following should be only in settings.xml and not committed -->
				<property>liquibase.username</property>
				<property>liquibase.password</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.liquibase</groupId>
						<artifactId>liquibase-maven-plugin</artifactId>
						<configuration>
							<changeLogFile>${basedir}/src/main/liquibase/master.xml</changeLogFile>
							<driver>${liquibase.driver}</driver>
							<url>${liquibase.driver}</url>
							<username>${liquibase.driver}</username>
							<password>${liquibase.driver}</password>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>scala-lang</id>
			<activation>
				<file>
					<exists>${basedir}/src/main/scala</exists>
				</file>
			</activation>
			<dependencies>
				<dependency>
					<groupId>org.scala-lang</groupId>
					<artifactId>scala-library</artifactId>
					<version>2.7.2-rc2</version>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.scala-tools</groupId>
						<artifactId>maven-scala-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>compile</goal>
									<goal>testCompile</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<sourceDir>src/main/scala</sourceDir>
							<jvmArg>-Xms64m</jvmArg>
							<jvmArg>-Xmx1024m</jvmArg>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

    <!-- vim: set noexpandtab tabstop=4 shiftwidth=4: -->
</project>
